name: 'Sonar Cloud composite action to analyze .NET projects'
description: 'Process .NET test results'
inputs:
  projects:  
    description: 'comma separated list of projects to analyze. Reminder to use the / separator to be compatible with Linux, and ensure only double quotes are used - single quotes will escape the command and not work as expected'
    required: true
  dotnet-version:
    description: 'the .NET version to use on .NET Setup'
    required: true
    default: '7.0.x'
  sonarcloud-organization:
    description: 'the sonarcloud organization name. For example, "samsmithnz-github"'
    required: true
  sonarcloud-project:
    description: 'the sonarcloud project name. For example, "samsmithnz_dotnetsample"'
    required: true
  SONAR_TOKEN:
    description: 'the sonar token secret. Note that GitHub will keep this as a secret (***) as long is the input is a secret'
    required: true
runs:
  using: 'composite'
  steps:
  - name: 'Pre-action checks'
    shell: pwsh
    run: |
      #Validate inputs
      if ("${{ inputs.projects }}" -eq $null)
      {
        echo "Please enter one of more projects, comma separated, input"
        exit 1
      }  
      if ("${{ inputs.sonarcloud-organization }}" -eq $null)
      {
        echo "Please enter a sonar organization input"
        exit 1
      }      
      if ("${{ inputs.sonarcloud-project }}" -eq $null)
      {
        echo "Please enter a sonarcloud project input"
        exit 1
      }
      if ("${{ inputs.SONAR_TOKEN }}" -eq $null)
      {
        echo "Please enter a sonar token input"
        exit 1
      }
  - name: Set up JDK 11
    if: false
    uses: actions/setup-java@v1
    with:
      java-version: 1.11
  - uses: actions/checkout@v3
    with:
      fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
  - name: Install .NET 7 SDK
    uses: actions/setup-dotnet@v3.2.0
    with:
      dotnet-version: ${{ inputs.dotnet-version }}
  - name: Cache SonarCloud packages
    uses: actions/cache@v3
    with:
      path: ~/sonar/cache
      key: ${{ runner.os }}-sonar
      restore-keys: ${{ runner.os }}-sonar
  - name: Cache SonarCloud scanner
    id: cache-sonar-scanner
    uses: actions/cache@v3
    with:
      path: ./.sonar/scanner
      key: ${{ runner.os }}-sonar-scanner
      restore-keys: ${{ runner.os }}-sonar-scanner

  - name: SonarCloud Scan
    uses: SonarSource/sonarcloud-github-action@master
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
  - name: Install SonarCloud scanner
    if: false # steps.cache-sonar-scanner.outputs.cache-hit != 'true'
    shell: pwsh
    run: |
      New-Item -Path ./.sonar/scanner -ItemType Directory
      dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
  - name: Build and analyze
    if: false
    shell: pwsh
    run: |
      ./.sonar/scanner/dotnet-sonarscanner begin /k:"${{ inputs.sonarcloud-project }}" /o:"${{ inputs.sonarcloud-organization }}" /d:sonar.login="${{ inputs.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
      $projectArray = "${{ inputs.projects}}".Split(",")
      for ($i = 0; $i -lt $projectArray.Length; $i++)
      {
         dotnet build $($projectArray[$i])
      }
      ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ inputs.SONAR_TOKEN }}"
